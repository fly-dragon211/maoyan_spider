# 软件的使用规范

一 软件开发目录规范

    - api   存放接口文件，接口主要用于为业务逻辑提供数据操作
        - api.py --> 应用程序编程接口

    - bin   整个项目的启动文件放置在这个文件夹中
        - start.py --> 启动软件入口

    - conf  整个项目的配置文件放置在这个文件夹
        - settings.py   配置文件
            - 比如存放一些固定的路径

    - core  整个项目的核心文件
        - src.py 核心业务逻辑代码

    - db    用于存放数据文件与操作数据的代码文件
        - db_file ---> db.txt ...
        - db_handler.py ---> 操作数据的代码

    - lib   项目的第三方包，共享的一些库
        - common: 存放公共的功能
            - 比如存放 装饰器

    - log   用于存放项目的日志文件
        - log.txt  存放日志的文件

    - README.TXT    整个项目的说明文件，项目需求和大致流程，相当于产品说明书


二 一个项目开发前，有一份开发文档

    项目: 编写小说阅读程序实现下属功能

        # 一：程序运行开始时显示
            0 账号注册
            1 账号登录
            2 充值功能
            3 阅读小说

        # 二： 针对文件db.txt，内容格式为："用户名:密码:金额",完成下述功能
            2.1、账号注册
            2.2、账号登录
            2.3、充值功能

        # 三：文件story_class.txt存放类别与小说文件路径，如下,读出来后可用eval反解出字典
            {
                "0":{
                    "0":["egon流浪记 - 序曲.txt",50],
                    "1":["成长之路 - 起源.txt",100]
                },
                "1":{
                    "0":["绿色的光 - 毁灭.txt",200],
                    "1":["egon再临 - 重生.txt",400]
                },
                "2":{
                    "0":["父子局 - 轮回.txt",500],
                    "1":["egon养成攻略 - 终章.txt",1000]
                },
            }

            3.1、用户登录成功后显示如下内容，根据用户选择，显示对应品类的小说编号、小说名字、以及小说的价格
            """
            0 起源系列
            1 重生系列
            2 轮回系列
            """

            3.2、用户输入具体的小说编号，提示是否付费，用户输入y确定后，
                 扣费并显示小说内容，如果余额不足则提示余额不足

        # 四：为功能2.2、3.1、3.2编写认证功能装饰器，要求必须登录后才能执行操作

        # 五：为功能2.2、3.2编写记录日志的装饰器，日志格式为："时间 用户名 操作(充值or消费) 金额"


        # 附加：
        # 可以拓展作者模块，作者可以上传自己的作品
